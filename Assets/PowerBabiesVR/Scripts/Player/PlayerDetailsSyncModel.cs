using Normal.Realtime.Serialization;
using UnityEngine;

[RealtimeModel]
public partial class PlayerDetailsSyncModel
{
	[RealtimeProperty (1, true, true)]
	private string _name;
	[RealtimeProperty (2, true, true)]
	private int _score;
    [RealtimeProperty(3, true, true)]
    private bool _isReady;
    [RealtimeProperty(4, true, false)]
    private int _playerNumber;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerDetailsSyncModel : IModel {
    // Properties
    public string name {
        get { return _cache.LookForValueInCache(_name, entry => entry.nameSet, entry => entry.name); }
        set { if (value == name) return; _cache.UpdateLocalCache(entry => { entry.nameSet = true; entry.name = value; return entry; }); FireNameDidChange(value); }
    }
    public int score {
        get { return _cache.LookForValueInCache(_score, entry => entry.scoreSet, entry => entry.score); }
        set { if (value == score) return; _cache.UpdateLocalCache(entry => { entry.scoreSet = true; entry.score = value; return entry; }); FireScoreDidChange(value); }
    }
    public bool isReady {
        get { return _cache.LookForValueInCache(_isReady, entry => entry.isReadySet, entry => entry.isReady); }
        set { if (value == isReady) return; _cache.UpdateLocalCache(entry => { entry.isReadySet = true; entry.isReady = value; return entry; }); FireIsReadyDidChange(value); }
    }

    public int playerNumber
    {
        get => _playerNumber;
        set => _playerNumber = value;
    }

    // Events
    public delegate void NameDidChange(PlayerDetailsSyncModel model, string value);
    public event         NameDidChange nameDidChange;
    public delegate void ScoreDidChange(PlayerDetailsSyncModel model, int value);
    public event         ScoreDidChange scoreDidChange;
    public delegate void IsReadyDidChange(PlayerDetailsSyncModel model, bool value);
    public event         IsReadyDidChange isReadyDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool   nameSet;
        public string name;
        public bool   scoreSet;
        public int    score;
        public bool   isReadySet;
        public bool   isReady;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public PlayerDetailsSyncModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireNameDidChange(string value) {
        try {
            if (nameDidChange != null)
                nameDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireScoreDidChange(int value) {
        try {
            if (scoreDidChange != null)
                scoreDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireIsReadyDidChange(bool value) {
        try {
            if (isReadyDidChange != null)
                isReadyDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Name = 1,
        Score = 2,
        IsReady = 3,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _name = name;
            _score = score;
            _isReady = isReady;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Name, _name);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Score, (uint)_score);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsReady, _isReady ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.nameSet)
                    length += WriteStream.WriteStringLength((uint)PropertyID.Name, entry.name);
                if (entry.scoreSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Score, (uint)entry.score);
                if (entry.isReadySet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.IsReady, entry.isReady ? 1u : 0u);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Name, _name);
            stream.WriteVarint32((uint)PropertyID.Score, (uint)_score);
            stream.WriteVarint32((uint)PropertyID.IsReady, _isReady ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.nameSet || entry.scoreSet || entry.isReadySet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.nameSet)
                    stream.WriteString((uint)PropertyID.Name, entry.name);
                if (entry.scoreSet)
                    stream.WriteVarint32((uint)PropertyID.Score, (uint)entry.score);
                if (entry.isReadySet)
                    stream.WriteVarint32((uint)PropertyID.IsReady, entry.isReady ? 1u : 0u);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool nameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.nameSet);
        bool scoreExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.scoreSet);
        bool isReadyExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isReadySet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Name: {
                    string previousValue = _name;
                    
                    _name = stream.ReadString();
                    
                    if (!nameExistsInChangeCache && _name != previousValue)
                        FireNameDidChange(_name);
                    break;
                }
                case (uint)PropertyID.Score: {
                    int previousValue = _score;
                    
                    _score = (int)stream.ReadVarint32();
                    
                    if (!scoreExistsInChangeCache && _score != previousValue)
                        FireScoreDidChange(_score);
                    break;
                }
                case (uint)PropertyID.IsReady: {
                    bool previousValue = _isReady;
                    
                    _isReady = (stream.ReadVarint32() != 0);
                    
                    if (!isReadyExistsInChangeCache && _isReady != previousValue)
                        FireIsReadyDidChange(_isReady);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
